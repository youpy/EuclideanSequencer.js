(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
'use strict';

global.Sequencer = require('./lib/sequencer');
global.Item = require('./lib/item');


}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./lib/item":3,"./lib/sequencer":4}],2:[function(require,module,exports){
// http://blog.fader.co.uk/post/11519018856/bjorklund-algorithm-and-euclidean-rhythms

'use strict';

var Calculator = function() {
};

function bjorklund(steps, pulses) {
	steps = Math.round(steps);
	pulses = Math.round(pulses);	

	if(pulses > steps || pulses == 0 || steps == 0) {
		return new Array();
	}

	var pattern = [],
	    counts = [],
	    remainders = [],
	    divisor = steps - pulses;
	var level = 0;

	remainders.push(pulses);

	while(true) {
		counts.push(Math.floor(divisor / remainders[level]));
		remainders.push(divisor % remainders[level]);
		divisor = remainders[level];
	  level += 1;
		if (remainders[level] <= 1) {
			break;
		}
	}
	
	counts.push(divisor);

	var r = 0;
	var build = function(level) {
		r++;
		if (level > -1) {
			for (var i=0; i < counts[level]; i++) {
				build(level-1);
			}	
			if (remainders[level] != 0) {
	      build(level-2);
			}
		} else if (level == -1) {
	    pattern.push(0);	
		} else if (level == -2) {
      pattern.push(1);
		}
	};

	build(level);

	return pattern.reverse();
}

Calculator.prototype.calculate = function(item, numSlots) {
  return bjorklund(numSlots, item.numPulses);
};

module.exports = Calculator;

},{}],3:[function(require,module,exports){
'use strict';

var Item = function(buffer, name) {
  this.buffer = buffer;
  this.numPulses = 0;
  this.name = name;
};

module.exports = Item;




},{}],4:[function(require,module,exports){
'use strict';

var Calculator = require('./calculator');

var Sequencer = function(ctx) {
  this.ctx = ctx;
  this.items = [];
  this.calculator = new Calculator();
  this.offset = 0;
  this.playing = false;

  this._tempo = 120;
  this._numSlots = 16;
};

Sequencer.prototype.add = function(item) {
  this.items.push(item);
};

Sequencer.prototype.setTempo = function(tempo) {
  var playing = this.playing;

  if(playing) {
    this.stop();
  }

  this._tempo = tempo;

  if(playing) {
    this.start();
  }
};

Sequencer.prototype.setNumSlots = function(numSlots) {
  var playing = this.playing;

  if(playing) {
    this.stop();
  }

  this._numSlots = numSlots;

  if(playing) {
    this.start();
  }
};

Sequencer.prototype.getTempo = function() {
  return this._tempo;
};

Sequencer.prototype.getNumSlots = function() {
  return this._numSlots;
};

Sequencer.prototype.start = function() {
  // proceed ctx.currentTime
  var node = this.ctx.createOscillator();
  node.connect(this.ctx.destination);
  node.start(0);
  node.stop(0);

  var that = this;

  this.playing = true;
  this.offset = this.ctx.currentTime;
  this.beats = 0;
  this.lastBeatTime = 0;
  this.intervalId = setInterval(function() {
    var patterns = [],
        time = that.ctx.currentTime - that.offset,
        numSlots = that._numSlots,
        beatInterval = 60 / (that._tempo * (numSlots / 4));

    that.items.forEach(function(item) {
      patterns.push(that.calculator.calculate(item, numSlots));
    });

    while(that.lastBeatTime < time + 0.3) {
      var beatTime = that.beats * beatInterval;

      for(var i = 0; i < patterns.length; i ++) {
        if(patterns[i][that.beats % numSlots] == 1) {
          var node = that.ctx.createBufferSource();

          node.buffer = that.items[i].buffer;
          node.connect(that.ctx.destination);
          node.start(beatTime + that.offset);
        }
      }

      that.beats ++;
      that.lastBeatTime = beatTime;
    }
  }, 150);
};

Sequencer.prototype.stop = function() {
  this.playing = false;
  clearInterval(this.intervalId);
};

module.exports = Sequencer;


},{"./calculator":2}]},{},[1])